export HISTCONTROL=ignoreboth:erasedups

alias ls='ls -G'
alias ll='ls -l'
alias ltr='ls -ltr'
alias topmemproc='ps aux |head -1;ps aux |tail -n+1 |sort -nrk4 |head -$(($(tput lines)-1)) |cut -c 1-$(tput cols)'
alias c='calculate'
alias sml='rlwrap sml'
alias whatslistening='lsof -n -i4TCP | grep LISTEN'
alias whatsusingnet='lsof -P -i -n | cut -f 1 -d " " | uniq'
alias pipup="pip freeze --local | grep -v '^\-e' | grep -iv Django | cut -d = -f 1 | xargs -n1 pip install -U"
alias graph='git log --all --decorate --oneline --graph'
alias vgraph="git log --graph --pretty=format:'%h - %d %s (%cr) <%an>' | vim -R -c 'set filetype=git nowrap' -"
alias svnd='svn diff | view -'
if [[ $OSTYPE == *linux* ]]
then
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
fi
alias yarnlistuser='yarn application -list -appStates finished,running | grep'
alias yarnlog='yarn logs -applicationId'

# python command line oneliners
alias pymail='python -m smtpd -n -c DebuggingServer localhost:20025'
alias pyjq='python -mjson.tool'
alias pyhttp='python -m SimpleHTTPServer'
#
set -o vi
export EDITOR=vim
#export DISPLAY=0.0:0
parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
if [ -n $SETDEVENV ]
then
	export PS1="\[\033[01;32m\]\u@\h\[\033[01;34m\]\[\033[01;35m\]$(parse_git_branch)\[\033[00m\] \w \n\$ \[\033[00m\]"
fi
#export PATH=~/bin:/usr/local/bin:/usr/local/sbin:~/Developer/blackberry-tablet-sdk-current:~/Deveoper/AdobeAIRSDK-current:$PATH
export PATH=~/bin:/usr/local/bin:/usr/local/sbin:$PATH

export DYLD_LIBRARY_PATH=/usr/local/mysql/lib/
export ERL_AFLAGS="+pc unicode -kernel shell_history enabled"

function dict() { (env dict $1 && echo "local dict used") || (curl dict://dict.org/d:$1 && echo "remote dict called")  }
function cheat() { (env cheat $1 && echo "local cheat used") || (curl cheat.sh/$1 && echo "remote cheat called") }

function rmd() {
	pandoc $1 | lynx -stdin
}

#http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump { 
	cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
	mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
	rm -i "$MARKPATH/$1"
}
function marks {
	\ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
_completemarks() {
	local curw=${COMP_WORDS[COMP_CWORD]}
	local wordlist=$(find $MARKPATH -type l -exec basename {} \;)
	COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
	return 0
}
complete -F _completemarks jump unmark

_complete_ssh_hosts ()
{
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        comp_ssh_hosts=`cat ~/.ssh/known_hosts | \
                        cut -f 1 -d ' ' | \
                        sed -e s/,.*//g | \
                        grep -v ^# | \
                        uniq | \
                        grep -v "\[" ;
                cat ~/.ssh/config | \
                        grep "^Host " | \
                        awk '{print $2,$3}'
                `
        COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- $cur))
        return 0
}
complete -F _complete_ssh_hosts ssh

function title {
    printf "\033];$1\007"
}

function ssh-menu() {
        cat ~/.ssh/config | grep "^Host " | awk '{$1="";print NR,$0}' | more
}

function setProfile() {
        echo -e "\033]50;SetProfile=$1\a"
}

#function workTimer() {
#	[ -z $1 ] && echo "Time is required" && return
#	sleep $1 && /usr/bin/osascript -e "display notification \"TIME'S UP\" with title \"NOTICE\""
#}

function workTimer() {
	[ -z $1 ] && echo "Time is required" && return
	time=$1
	while [ $time -gt 0 ]
	do
		time=$((time-=1))
		printf "\r%d" $time
		sleep 1
	done
	/usr/bin/osascript -e "display notification \"TIME'S UP\" with title \"NOTICE\""
}

showcolor(){ display -size 400x400 "xc:$1" ; }

